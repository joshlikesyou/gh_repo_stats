#!/usr/bin/env ruby

require 'open-uri'
require 'zlib'
require 'getoptlong'
require 'json'
require 'time'
require 'date'

opts = GetoptLong.new(
	[ '--after', GetoptLong::REQUIRED_ARGUMENT],
	[ '--before', GetoptLong::REQUIRED_ARGUMENT],
	[ '--event', GetoptLong::OPTIONAL_ARGUMENT],
	[ '--count', GetoptLong::OPTIONAL_ARGUMENT]
)

@path = 'http://data.githubarchive.org/'
@ext = '.json.gz'
@event = "PushEvent"
@count = 15
@queries = []
@parsed = []
@repos = {}

# options from command
opts.each do |opt, arg|
	case opt
	when '--after'
		@a_time = Time.parse(arg)
		@a_date = Date.parse(arg)
	when '--before'
		@b_time = Time.parse(arg)
		@b_date = Date.parse(arg)
	when '--event'
		@event = arg
	when '--count'
		@count = arg.to_i
	end
end

# Go through each hour and make api call
def query_by_hour(mode, date)
	mode == :after ? @p_time = @a_time : @p_time = @b_time
	unless @p_time.hour == 0
		# Loop through remaining hours in query
		# only used on days that are partially selected
		# check if this is from the after argument
		if mode == :after
			hour = @p_time.hour
		  while hour < 24
				@queries << "#{@path}#{date}-#{hour}#{@ext}"
				hour += 1
			end
		elsif mode == :before
		# check if this is from the before argument
			hour = 0
			while hour <= @p_time.hour
				@queries << "#{@path}#{date}-#{hour}#{@ext}"
				hour += 1
			end
		end
	else
		# else go through hours of a whole day
		query_by_day(date)
	end
end

def query_by_day(date)
	hour = 0
	while hour < 24
		@queries << "#{@path}#{date}-#{hour}#{@ext}"
		hour += 1
	end
end

def process_date_range
	(@a_date..@b_date).each_with_index do |date|
		if date.to_s == @a_date.strftime('%F')
			# check if date is first day, get by the hour
			query_by_hour(:after, date)
		elsif date.to_s == @b_date.strftime('%F')
			# check if date is last day, get by the hour
			query_by_hour(:before, date)
		else
			# runs all the inbetween days
			query_by_day(date)
		end
	end
end

def make_calls
	@queries.each do |uri|
		gz = open(uri)
		js = Zlib::GzipReader.new(gz)
		@parsed = []
		js.each do |j|
			@parsed << JSON.parse(j)
		end
	end
end

def process_repos
	# tally up the score from the repos
	@parsed.each do |i|
		if i["repository"] && i["type"] == @event
			reponame = i["repository"]["owner"] + '/' + i["repository"]["name"]
			if @repos[reponame].nil?
				@repos[reponame] = 1
			else
				@repos[reponame] = @repos[reponame] + 1
			end
		end
	end
	@repos = @repos.sort_by { |k,v| [-v,k] }.to_h.first(@count)
	@repos.each do |r|
		puts "#{r[0]} - #{r[1]} events"
	end
end

def process
	process_date_range
	make_calls
	process_repos
end

process
